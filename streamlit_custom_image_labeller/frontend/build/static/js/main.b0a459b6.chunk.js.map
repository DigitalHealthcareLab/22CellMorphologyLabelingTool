{"version":3,"sources":["StreamlitImgLabel.module.css","CustomImageLabeller.tsx","index.tsx"],"names":["module","exports","initCanvas","canvasWidth","canvasHeight","imageData","pointX","pointY","pointColor","datauri","dataUri","invisCanvas","document","createElement","width","height","ctx","getContext","idata","createImageData","data","set","putImageData","toDataURL","getImage","canvas","fabric","Canvas","backgroundImage","pointObj","Circle","radius","fill","left","top","selectable","originX","originY","hoverCursor","lockScalingX","lockScalingY","add","addPoint","withStreamlitConnection","props","args","useState","mode","setCanvas","point","x","setPointX","y","setPointY","useEffect","on","options","e","clientX","clientY","Streamlit","setFrameHeight","setComponentValue","id","className","styles","dark","ReactDOM","render","StrictMode","getElementById"],"mappings":"sIACAA,EAAOC,QAAU,CAAC,KAAO,kC,8MCuDnBC,EAAa,SAAC,GAAuM,IAArMC,EAAoM,EAApMA,YAAaC,EAAuL,EAAvLA,aAAcC,EAAyK,EAAzKA,UAAWC,EAA8J,EAA9JA,OAAQC,EAAsJ,EAAtJA,OAAQC,EAA8I,EAA9IA,WAClEC,EAnCO,SAACN,EAAoBC,EAAqBC,GACvD,IAAIK,EACEC,EAAcC,SAASC,cAAc,UAC3CF,EAAYG,MAAQX,EACpBQ,EAAYI,OAASX,EACrB,IAAMY,EAAML,EAAYM,WAAW,MACnC,GAAID,EAAK,CACL,IAAME,EAAQF,EAAIG,gBAAgBhB,EAAaC,GAE/Cc,EAAME,KAAKC,IAAIhB,GAEfW,EAAIM,aAAaJ,EAAO,EAAG,GAC3BR,EAAUC,EAAYY,iBAEtBb,EAAU,GAEd,OAAOA,EAmBSc,CAASrB,EAAaC,EAAcC,GAC9CoB,EAAS,IAAIC,SAAOC,OAAO,SAAU,CAACZ,OAAQX,EAAcU,MAAMX,EAAayB,gBAAiBnB,IAEtG,OApBa,SAACgB,EAAsBnB,EAAeC,EAAeC,GAClE,IAAMqB,EAAW,IAAIH,SAAOI,OAAO,CAC3BC,OAAQ,EACRC,KAAMxB,EACNyB,KAAM3B,EACN4B,IAAK3B,EACL4B,YAAY,EACZC,QAAS,SACTC,QAAS,SACTC,YAAa,OACbC,cAAc,EACdC,cAAc,IAEtBf,EAAOgB,IAAIZ,GAMXa,CAASjB,EAAQnB,EAAQC,EAAQC,GAC1BiB,GAkCIkB,eA/Ba,SAACC,GACzB,MAA6DA,EAAMC,KAA3D1C,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,aAAcC,EAAnC,EAAmCA,UAC7BG,EAAaoC,EAAMC,KAAKrC,WAC9B,EAAyBsC,mBAAiB,SAA1C,mBAAOC,EAAP,KACA,GADA,KACuBD,mBAA6B,OAA3CE,EAAT,oBACA,EAA8BF,mBAAiBF,EAAMC,KAAKI,MAAMC,GAAhE,mBAAQ5C,EAAR,KAAgB6C,EAAhB,KACA,EAA8BL,mBAAiBF,EAAMC,KAAKI,MAAMG,GAAhE,mBAAQ7C,EAAR,KAAgB8C,EAAhB,KAaA,OAXAC,qBAAU,WACN,IAAM7B,EAASvB,EAAW,CAAEC,cAAaC,eAAcC,YAAWC,SAAQC,SAAQC,eAClFiB,EAAO8B,GAAG,cAAc,SAACC,GACrBL,EAAUK,EAAQC,EAAEC,SACpBL,EAAUG,EAAQC,EAAEE,YAExBX,EAAUvB,GACVmC,IAAUC,iBACVD,IAAUE,kBAAkB,CAACZ,EAAE5C,EAAQ8C,EAAE7C,MAE1C,CAACD,EAAQC,IAER,oCACI,4BACIwD,GAAG,SACHC,UAAoB,SAATjB,EAAkBkB,IAAOC,KAAO,GAC3CpD,MAAOX,EACPY,OAAQX,QCpFxB+D,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFzD,SAAS0D,eAAe,W","file":"static/js/main.b0a459b6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dark\":\"StreamlitImgLabel_dark__PyW4C\"};","import React, { useEffect, useState} from \"react\"\nimport {\n    ComponentProps,\n    Streamlit,\n    withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport { fabric } from \"fabric\"\nimport styles from \"./StreamlitImgLabel.module.css\"\n\ninterface PointProps {\n  x:number\n  y:number\n}\n\ninterface PythonArgs {\n    canvasWidth: number\n    canvasHeight: number\n    point: PointProps\n    pointColor: string\n    imageData: Uint8ClampedArray\n}\n\nconst getImage = (canvasWidth:number, canvasHeight:number, imageData: Uint8ClampedArray):string =>{\n    let dataUri: any\n    const invisCanvas = document.createElement(\"canvas\")\n    invisCanvas.width = canvasWidth\n    invisCanvas.height = canvasHeight\n    const ctx = invisCanvas.getContext(\"2d\")\n    if (ctx) {\n        const idata = ctx.createImageData(canvasWidth, canvasHeight)\n        // set our buffer as source\n        idata.data.set(imageData)\n        // update canvas with new data\n        ctx.putImageData(idata, 0, 0)\n        dataUri = invisCanvas.toDataURL()\n    } else {\n        dataUri = \"\"\n    }    \n    return dataUri\n}\nconst addPoint = (canvas:fabric.Canvas, pointX:number, pointY:number, pointColor:string) => {\n    const pointObj = new fabric.Circle({\n            radius: 3,\n            fill: pointColor,\n            left: pointX,\n            top: pointY,\n            selectable: true,\n            originX: \"center\",\n            originY: \"center\",\n            hoverCursor: \"auto\",\n            lockScalingX: true,\n            lockScalingY: true,\n        })          \n    canvas.add(pointObj);\n}\n\nconst initCanvas = ({ canvasWidth, canvasHeight, imageData, pointX, pointY, pointColor }: {canvasWidth: number; canvasHeight: number; imageData: Uint8ClampedArray, pointX:number, pointY:number, pointColor:string }) => {\n    const datauri = getImage(canvasWidth, canvasHeight, imageData)\n    const canvas = new fabric.Canvas(\"canvas\", {height :canvasHeight, width:canvasWidth, backgroundImage: datauri})\n    addPoint(canvas, pointX, pointY, pointColor)\n    return canvas\n}\n\nconst CustomImageLabeller = (props: ComponentProps) => {\n    const { canvasWidth, canvasHeight, imageData }: PythonArgs = props.args\n    const pointColor = props.args.pointColor\n    const [mode, setMode ] = useState<string>(\"light\")\n    const [, setCanvas ] = useState<fabric.Canvas|null>(null)\n    const [ pointX, setPointX ] = useState<number>(props.args.point.x)\n    const [ pointY, setPointY ] = useState<number>(props.args.point.y)\n\n    useEffect(() => {\n        const canvas = initCanvas({ canvasWidth, canvasHeight, imageData, pointX, pointY, pointColor })\n        canvas.on('mouse:down', (options):void => {\n            setPointX(options.e.clientX)\n            setPointY(options.e.clientY)\n        });\n        setCanvas(canvas)\n        Streamlit.setFrameHeight()\n        Streamlit.setComponentValue({x:pointX, y:pointY});\n\n    }, [pointX, pointY])\n    return (\n        <>\n            <canvas\n                id=\"canvas\"\n                className={mode === \"dark\" ? styles.dark : \"\"}\n                width={canvasWidth}\n                height={canvasHeight}\n            />\n        </>\n    )\n}\n\nexport default withStreamlitConnection(CustomImageLabeller)","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport CustomImageLabeller from \"./CustomImageLabeller\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <CustomImageLabeller/>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}