{"version":3,"sources":["StreamlitImgLabel.module.css","CustomImageLabeller.tsx","index.tsx"],"names":["module","exports","initCanvas","canvasWidth","canvasHeight","imageData","point","pointColor","datauri","dataUri","invisCanvas","document","createElement","width","height","ctx","getContext","idata","createImageData","data","set","putImageData","toDataURL","getImage","canvas","fabric","Canvas","backgroundImage","pointObj","Circle","radius","fill","left","x","top","y","selectable","originX","originY","hoverCursor","lockScalingX","lockScalingY","add","addPoint","withStreamlitConnection","props","args","useState","mode","setPoint","setCanvas","on","options","e","clientX","clientY","console","log","useEffect","Streamlit","setFrameHeight","setComponentValue","id","className","styles","dark","ReactDOM","render","StrictMode","getElementById"],"mappings":"sIACAA,EAAOC,QAAU,CAAC,KAAO,kC,sNCwDnBC,EAAa,SAACC,EAAoBC,EAAqBC,EAA6BC,EAAkBC,GACxG,IAAMC,EApCO,SAACL,EAAoBC,EAAqBC,GACvD,IAAII,EACEC,EAAcC,SAASC,cAAc,UAC3CF,EAAYG,MAAQV,EACpBO,EAAYI,OAASV,EACrB,IAAMW,EAAML,EAAYM,WAAW,MACnC,GAAID,EAAK,CACL,IAAME,EAAQF,EAAIG,gBAAgBf,EAAaC,GAE/Ca,EAAME,KAAKC,IAAIf,GAEfU,EAAIM,aAAaJ,EAAO,EAAG,GAC3BR,EAAUC,EAAYY,iBAEtBb,EAAU,GAEd,OAAOA,EAoBSc,CAASpB,EAAaC,EAAcC,GAChDmB,EAAS,IAAIC,SAAOC,OAAO,SAAU,CAACZ,OAAQV,EAAcS,MAAMV,EAAawB,gBAAiBnB,IAEpG,OADAgB,EApBa,SAACA,EAAsBlB,EAAkBC,GACtD,IAAMqB,EAAW,IAAIH,SAAOI,OAAO,CAC3BC,OAAQ,EACRC,KAAMxB,EACNyB,KAAM1B,EAAM2B,EACZC,IAAK5B,EAAM6B,EACXC,YAAY,EACZC,QAAS,SACTC,QAAS,SACTC,YAAa,OACbC,cAAc,EACdC,cAAc,IAGtB,OADAjB,EAAOkB,IAAId,GACJJ,EAMEmB,CAASnB,EAAQlB,EAAOC,IAkCtBqC,eA9Ba,SAACC,GACzB,MAA6DA,EAAMC,KAA3D3C,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,aAAcC,EAAnC,EAAmCA,UAC7BE,EAAasC,EAAMC,KAAKvC,WAC9B,EAAyBwC,mBAAiB,SAA1C,mBAAOC,EAAP,KACA,GADA,KAC0BD,mBAAqB,CAACd,EAAEY,EAAMC,KAAKxC,MAAM2B,EAAGE,EAAEU,EAAMC,KAAKxC,MAAM6B,KAAzF,mBAAO7B,EAAP,KAAc2C,EAAd,KACA,EAA6BF,mBAAwB7C,EAAWC,EAAaC,EAAcC,EAAWC,EAAOC,IAA7G,mBAAOiB,EAAP,KAAe0B,EAAf,KAaA,OAXA1B,EAAO2B,GAAG,cAAc,SAACC,GACrBH,EAAS,2BAAI3C,GAAL,IAAY2B,EAAEmB,EAAQC,EAAEC,QAASnB,EAAEiB,EAAQC,EAAEE,WACrDC,QAAQC,IAAInD,MAGhBoD,qBAAU,WACNR,EAAUhD,EAAWC,EAAaC,EAAcC,EAAWC,EAAOC,IAClEoD,IAAUC,iBACVD,IAAUE,kBAAkB,CAAC5B,EAAE3B,EAAM2B,EAAGE,EAAE7B,EAAM6B,MACjD,CAAC7B,EAAOD,IAGP,oCACI,4BACIyD,GAAG,SACHC,UAAoB,SAATf,EAAkBgB,IAAOC,KAAO,GAC3CpD,MAAOV,EACPW,OAAQV,QCpFxB8D,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFzD,SAAS0D,eAAe,W","file":"static/js/main.7473f046.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dark\":\"StreamlitImgLabel_dark__PyW4C\"};","import React, { useEffect, useState} from \"react\"\nimport {\n    ComponentProps,\n    Streamlit,\n    withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport { fabric } from \"fabric\"\nimport styles from \"./StreamlitImgLabel.module.css\"\n\ninterface PointProps {\n  x:number\n  y:number\n}\n\ninterface PythonArgs {\n    canvasWidth: number\n    canvasHeight: number\n    point: PointProps\n    pointColor: string\n    imageData: Uint8ClampedArray\n}\n\nconst getImage = (canvasWidth:number, canvasHeight:number, imageData: Uint8ClampedArray):string =>{\n    let dataUri: any\n    const invisCanvas = document.createElement(\"canvas\")\n    invisCanvas.width = canvasWidth\n    invisCanvas.height = canvasHeight\n    const ctx = invisCanvas.getContext(\"2d\")\n    if (ctx) {\n        const idata = ctx.createImageData(canvasWidth, canvasHeight)\n        // set our buffer as source\n        idata.data.set(imageData)\n        // update canvas with new data\n        ctx.putImageData(idata, 0, 0)\n        dataUri = invisCanvas.toDataURL()\n    } else {\n        dataUri = \"\"\n    }    \n    return dataUri\n}\nconst addPoint = (canvas:fabric.Canvas, point:PointProps, pointColor:string) => {\n    const pointObj = new fabric.Circle({\n            radius: 3,\n            fill: pointColor,\n            left: point.x,\n            top: point.y,\n            selectable: true,\n            originX: \"center\",\n            originY: \"center\",\n            hoverCursor: \"auto\",\n            lockScalingX: true,\n            lockScalingY: true,\n        })          \n    canvas.add(pointObj);\n    return canvas\n}\n\nconst initCanvas = (canvasWidth:number, canvasHeight:number, imageData:Uint8ClampedArray, point:PointProps, pointColor:string) => {\n    const datauri = getImage(canvasWidth, canvasHeight, imageData)\n    let canvas = new fabric.Canvas(\"canvas\", {height :canvasHeight, width:canvasWidth, backgroundImage: datauri})\n    canvas = addPoint(canvas, point, pointColor)\n    return canvas\n}\n\nconst CustomImageLabeller = (props: ComponentProps) => {\n    const { canvasWidth, canvasHeight, imageData }: PythonArgs = props.args\n    const pointColor = props.args.pointColor\n    const [mode, setMode ] = useState<string>(\"light\")\n    const [point, setPoint] = useState<PointProps>({x:props.args.point.x, y:props.args.point.y})\n    const [canvas, setCanvas ] = useState<fabric.Canvas>(initCanvas(canvasWidth, canvasHeight, imageData, point, pointColor))\n    \n    canvas.on('mouse:down', (options):void => {   \n        setPoint({...point, x:options.e.clientX, y:options.e.clientY})\n        console.log(point)\n    });\n    \n    useEffect(() => {\n        setCanvas(initCanvas(canvasWidth, canvasHeight, imageData, point, pointColor))\n        Streamlit.setFrameHeight()\n        Streamlit.setComponentValue({x:point.x, y:point.y});\n    }, [point, imageData])\n    \n    return (\n        <>\n            <canvas\n                id=\"canvas\"\n                className={mode === \"dark\" ? styles.dark : \"\"}\n                width={canvasWidth}\n                height={canvasHeight}\n            />\n        </>\n    )\n}\n\nexport default withStreamlitConnection(CustomImageLabeller)","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport CustomImageLabeller from \"./CustomImageLabeller\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <CustomImageLabeller/>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}